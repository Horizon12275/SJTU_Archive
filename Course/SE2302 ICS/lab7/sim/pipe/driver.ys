#######################################################################
# Test for copying block of size 64;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $64, %rdx		# src and dst have 64 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 赵楷越 Zhaokaiyue 522031910803
#
# Describe how and why you modified the baseline code.
# 1. Change irmovq&addq into iaddq, to reduce the number of instructions
# eg. irmovq $8, %r8 addq %r8, %rdi -> iaddq $8, %rdi
#
# 2. Loop unrolling, to reduce the cost due to original loops.
# eg. 
# Loop0: 
#     mrmovq (%rdi), %r8 # read val from src...
#     rmmovq %r8, (%rsi) # ...and store it to dst
#     andq %r8, %r8 # val <= 0?
#     jle Loop1
#     iaddq $1, %rax     
# Loop1:
#     mrmovq 8(%rdi), %r8 # read val from src...
#     rmmovq %r8, 8(%rsi) # ...and store it to dst
#     andq %r8, %r8 # val <= 0?
#     jle Loop2
#     iaddq $1, %rax  
# ...(repeat 6 times)
#
# 3. Handle the situation that the remaining len is not a multiple of 8.
# eg. if len < 8, then use different ways to copy the rest of the data.
# Remain7:
#     mrmovq 48(%rdi), %r8 	# read val from src...
#     rmmovq %r8, 48(%rsi) 	# ...and store it to dst  
#     andq %r8, %r8 		# val <= 0?
#     jle Remain6
#     iaddq $1, %rax 
# Remain6:
#     mrmovq 40(%rdi), %r8 	# read val from src...
#     rmmovq %r8, 40(%rsi) 	# ...and store it to dst
#     andq %r8, %r8 		# val <= 0?
#     jle Remain5
#     iaddq $1, %rax 
# ...(repeat 6 times)
#
# 4. Use the idea of binary search to reduce the CPE when initial len < 8.
# eg. 
# LessThan8:
#     iaddq $4, %rdx
#     jl LessThan4
#     je Remain4
#     iaddq $-2, %rdx
#     jl Remain5
#     je Remain6
#     jmp Remain7
# LessThan4:
#	 (do the similar thing as LessThan8)
#
# 5. Remove the bubble due to load and use hazard.
# eg. Method: Load the next value before using the current value, 
# combine two loops into one loop. Consequently, the bubble disappears.
# Loop: 
#     mrmovq (%rdi), %r8 # read val from src...
# 	  mrmovq 8(%rdi), %r9 # read val from src...
#     rmmovq %r8, (%rsi) # ...and store it to dst
#     rmmovq %r9, 8(%rsi) # ...and store it to dst
#     andq %r8, %r8 # val <= 0?
#     jle Loop1
#     iaddq $1, %rax     
# Loop1:
#     andq %r9, %r9 # val <= 0?
#     jle Loop2
#     iaddq $1, %rax  

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
    # Loop header
    # xorq %rax,%rax        # count = 0; # of positive vals
    iaddq $-8, %rdx
    jl  LessThan8
Loop0: 
    mrmovq (%rdi), %r8 		# read val from src...
	mrmovq 8(%rdi), %r9 	# read val from src...
    rmmovq %r8, (%rsi) 		# ...and store it to dst
    rmmovq %r9, 8(%rsi) 	# ...and store it to dst
    andq %r8, %r8 			# val <= 0?
    jle Loop1
    iaddq $1, %rax     		# count++
Loop1:
    andq %r9, %r9 			# val <= 0?
    jle Loop2
    iaddq $1, %rax  
Loop2:
    mrmovq 16(%rdi), %r8 	# read val from src...
	mrmovq 24(%rdi), %r9 	# read val from src...
    rmmovq %r8, 16(%rsi) 	# ...and store it to dst
    rmmovq %r9, 24(%rsi) 	# ...and store it to dst
    andq %r8, %r8 			# val <= 0?
    jle Loop3
    iaddq $1, %rax  		# count++
Loop3:
    andq %r9, %r9 			# val <= 0?
    jle Loop4
    iaddq $1, %rax  
Loop4:
    mrmovq 32(%rdi), %r8 	# read val from src...
	mrmovq 40(%rdi), %r9 	# read val from src...
    rmmovq %r8, 32(%rsi) 	# ...and store it to dst
    rmmovq %r9, 40(%rsi) 	# ...and store it to dst
    andq %r8, %r8 			# val <= 0?
    jle Loop5
    iaddq $1, %rax  		# count++
Loop5:
    andq %r9, %r9 			# val <= 0?
    jle Loop6
    iaddq $1, %rax  
Loop6:
    mrmovq 48(%rdi), %r8 	# read val from src...
	mrmovq 56(%rdi), %r9 	# read val from src...
    rmmovq %r8, 48(%rsi) 	# ...and store it to dst
    rmmovq %r9, 56(%rsi) 	# ...and store it to dst
    andq %r8, %r8 			# val <= 0?
    jle Loop7
    iaddq $1, %rax  		# count++
Loop7:
    andq %r9, %r9 			# val <= 0?
    jle LoopTest
    iaddq $1, %rax  		# count++
LoopTest:					# Test whether the remaining len is a multiple of 8
    iaddq $64, %rdi         # %rdi = src, %rsi = dst, %rdx = len
    iaddq $64, %rsi         
    iaddq $-8, %rdx         
    jge Loop0               # if the remaining len > 0, continue to loop0
LessThan8:
    iaddq $4, %rdx			# Handle the situation that the remaining len is not a multiple of 8
    jl LessThan4
    je Remain4
    iaddq $-2, %rdx 		# Use the idea of binary search to reduce the CPE when initial len < 8
	jl Remain5
	je Remain6
    jmp Remain7
LessThan4:
    iaddq $3, %rdx
    je Remain1
    iaddq $-1, %rdx
	je Remain2
	jg Remain3n
    jmp Done
Remain3n:
	mrmovq 16(%rdi), %r11	# read val from src...
	rmmovq %r11, 16(%rsi)
	andq %r11, %r11		# val <= 0?
Remain2n:
	mrmovq 8(%rdi), %r11	# read val from src...
	jle Remain22n		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain22n:
	rmmovq %r11, 8(%rsi)
	andq %r11, %r11		# val <= 0?
Remain1n:
	mrmovq (%rdi), %r11	# read val from src...
	jle Remain12n		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain12n:
	rmmovq %r11, (%rsi)
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
	jmp Done
Remain7:
	mrmovq 48(%rdi), %r11	# read val from src...
	rmmovq %r11, 48(%rsi)
	andq %r11, %r11		# val <= 0?
Remain6:
	mrmovq 40(%rdi), %r11	# read val from src...
	jle Remain62		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain62:
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11		# val <= 0?
Remain5:
	mrmovq 32(%rdi), %r11	# read val from src...
	jle Remain52		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain52:	
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11		# val <= 0?
Remain4:
	mrmovq 24(%rdi), %r11	# read val from src...
	jle Remain42	# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain42:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
Remain3:
	mrmovq 16(%rdi), %r11	# read val from src...
	jle Remain32		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain32:
	rmmovq %r11, 16(%rsi)
	andq %r11, %r11		# val <= 0?
Remain2:
	mrmovq 8(%rdi), %r11	# read val from src...
	jle Remain22		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain22:
	rmmovq %r11, 8(%rsi)
	andq %r11, %r11		# val <= 0?
Remain1:
	mrmovq (%rdi), %r11	# read val from src...
	jle Remain12		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
Remain12:
	rmmovq %r11, (%rsi)
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $0x1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 38.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $38,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $64,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 5
	.quad 6
	.quad 7
	.quad 8
	.quad -9
	.quad -10
	.quad 11
	.quad 12
	.quad 13
	.quad 14
	.quad 15
	.quad 16
	.quad -17
	.quad -18
	.quad -19
	.quad -20
	.quad 21
	.quad -22
	.quad 23
	.quad 24
	.quad 25
	.quad -26
	.quad -27
	.quad 28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad 38
	.quad -39
	.quad 40
	.quad 41
	.quad -42
	.quad -43
	.quad 44
	.quad 45
	.quad -46
	.quad -47
	.quad 48
	.quad -49
	.quad 50
	.quad -51
	.quad -52
	.quad -53
	.quad -54
	.quad -55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad -62
	.quad 63
	.quad 64
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
