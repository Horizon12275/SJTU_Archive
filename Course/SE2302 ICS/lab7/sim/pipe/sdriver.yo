                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 赵楷越 Zhaokaiyue 522031910803
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Change irmovq&addq into iaddq, to reduce the number of instructions
                            | # eg. irmovq $8, %r8 addq %r8, %rdi -> iaddq $8, %rdi
                            | #
                            | # 2. Loop unrolling, to reduce the cost due to original loops.
                            | # eg. 
                            | # Loop0: 
                            | #     mrmovq (%rdi), %r8 # read val from src...
                            | #     rmmovq %r8, (%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop1
                            | #     iaddq $1, %rax     
                            | # Loop1:
                            | #     mrmovq 8(%rdi), %r8 # read val from src...
                            | #     rmmovq %r8, 8(%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop2
                            | #     iaddq $1, %rax  
                            | # ...(repeat 6 times)
                            | #
                            | # 3. Handle the situation that the remaining len is not a multiple of 8.
                            | # eg. if len < 8, then use different ways to copy the rest of the data.
                            | # Remain7:
                            | #     mrmovq 48(%rdi), %r8 	# read val from src...
                            | #     rmmovq %r8, 48(%rsi) 	# ...and store it to dst  
                            | #     andq %r8, %r8 		# val <= 0?
                            | #     jle Remain6
                            | #     iaddq $1, %rax 
                            | # Remain6:
                            | #     mrmovq 40(%rdi), %r8 	# read val from src...
                            | #     rmmovq %r8, 40(%rsi) 	# ...and store it to dst
                            | #     andq %r8, %r8 		# val <= 0?
                            | #     jle Remain5
                            | #     iaddq $1, %rax 
                            | # ...(repeat 6 times)
                            | #
                            | # 4. Use the idea of binary search to reduce the CPE when initial len < 8.
                            | # eg. 
                            | # LessThan8:
                            | #     iaddq $4, %rdx
                            | #     jl LessThan4
                            | #     je Remain4
                            | #     iaddq $-2, %rdx
                            | #     jl Remain5
                            | #     je Remain6
                            | #     jmp Remain7
                            | # LessThan4:
                            | #	 (do the similar thing as LessThan8)
                            | #
                            | # 5. Remove the bubble due to load and use hazard.
                            | # eg. Method: Load the next value before using the current value, 
                            | # combine two loops into one loop. Consequently, the bubble disappears.
                            | # Loop: 
                            | #     mrmovq (%rdi), %r8 # read val from src...
                            | # 	  mrmovq 8(%rdi), %r9 # read val from src...
                            | #     rmmovq %r8, (%rsi) # ...and store it to dst
                            | #     rmmovq %r9, 8(%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop1
                            | #     iaddq $1, %rax     
                            | # Loop1:
                            | #     andq %r9, %r9 # val <= 0?
                            | #     jle Loop2
                            | #     iaddq $1, %rax  
                            | # ...(repeat 6 times)
                            | #6. Finally, I found that the last part of the remainers can also avoid load and use hazards.
                            | #	I searched and asked my roommate for some ideas to optimize the code.
                            | #   eg. I changed the original code: Remain6 to Remain6 and Remain62 to achieve the same effect.
                            | #   also, the situation of Remain7 and Remain3 should be considered differently beacuse of binary search method.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
                            |     # xorq %rax,%rax        # count = 0; # of positive vals
0x032: c0f2f8ffffffffffffff |     iaddq $-8, %rdx
0x03c: 72b401000000000000   |     jl  LessThan8
0x045:                      | Loop0: 
0x045: 50870000000000000000 |     mrmovq (%rdi), %r8 		# read val from src...
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 	# read val from src...
0x059: 40860000000000000000 |     rmmovq %r8, (%rsi) 		# ...and store it to dst
0x063: 40960800000000000000 |     rmmovq %r9, 8(%rsi) 	# ...and store it to dst
0x06d: 6288                 |     andq %r8, %r8 			# val <= 0?
0x06f: 718200000000000000   |     jle Loop1
0x078: c0f00100000000000000 |     iaddq $1, %rax     		# count++
0x082:                      | Loop1:
0x082: 6299                 |     andq %r9, %r9 			# val <= 0?
0x084: 719700000000000000   |     jle Loop2
0x08d: c0f00100000000000000 |     iaddq $1, %rax  
0x097:                      | Loop2:
0x097: 50871000000000000000 |     mrmovq 16(%rdi), %r8 	# read val from src...
0x0a1: 50971800000000000000 | 	mrmovq 24(%rdi), %r9 	# read val from src...
0x0ab: 40861000000000000000 |     rmmovq %r8, 16(%rsi) 	# ...and store it to dst
0x0b5: 40961800000000000000 |     rmmovq %r9, 24(%rsi) 	# ...and store it to dst
0x0bf: 6288                 |     andq %r8, %r8 			# val <= 0?
0x0c1: 71d400000000000000   |     jle Loop3
0x0ca: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x0d4:                      | Loop3:
0x0d4: 6299                 |     andq %r9, %r9 			# val <= 0?
0x0d6: 71e900000000000000   |     jle Loop4
0x0df: c0f00100000000000000 |     iaddq $1, %rax  
0x0e9:                      | Loop4:
0x0e9: 50872000000000000000 |     mrmovq 32(%rdi), %r8 	# read val from src...
0x0f3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9 	# read val from src...
0x0fd: 40862000000000000000 |     rmmovq %r8, 32(%rsi) 	# ...and store it to dst
0x107: 40962800000000000000 |     rmmovq %r9, 40(%rsi) 	# ...and store it to dst
0x111: 6288                 |     andq %r8, %r8 			# val <= 0?
0x113: 712601000000000000   |     jle Loop5
0x11c: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x126:                      | Loop5:
0x126: 6299                 |     andq %r9, %r9 			# val <= 0?
0x128: 713b01000000000000   |     jle Loop6
0x131: c0f00100000000000000 |     iaddq $1, %rax  
0x13b:                      | Loop6:
0x13b: 50873000000000000000 |     mrmovq 48(%rdi), %r8 	# read val from src...
0x145: 50973800000000000000 | 	mrmovq 56(%rdi), %r9 	# read val from src...
0x14f: 40863000000000000000 |     rmmovq %r8, 48(%rsi) 	# ...and store it to dst
0x159: 40963800000000000000 |     rmmovq %r9, 56(%rsi) 	# ...and store it to dst
0x163: 6288                 |     andq %r8, %r8 			# val <= 0?
0x165: 717801000000000000   |     jle Loop7
0x16e: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x178:                      | Loop7:
0x178: 6299                 |     andq %r9, %r9 			# val <= 0?
0x17a: 718d01000000000000   |     jle LoopTest
0x183: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x18d:                      | LoopTest:					# Test whether the remaining len is a multiple of 8
0x18d: c0f74000000000000000 |     iaddq $64, %rdi         # %rdi = src, %rsi = dst, %rdx = len
0x197: c0f64000000000000000 |     iaddq $64, %rsi         
0x1a1: c0f2f8ffffffffffffff |     iaddq $-8, %rdx         
0x1ab: 754500000000000000   |     jge Loop0               # if the remaining len > 0, continue to loop0
0x1b4:                      | LessThan8:
0x1b4: c0f20400000000000000 |     iaddq $4, %rdx			# Handle the situation that the remaining len is not a multiple of 8
0x1be: 72f501000000000000   |     jl LessThan4
0x1c7: 731903000000000000   |     je Remain4
0x1d0: c0f2feffffffffffffff |     iaddq $-2, %rdx 		# Use the idea of binary search to reduce the CPE when initial len < 8
0x1da: 72f002000000000000   | 	jl Remain5
0x1e3: 73c702000000000000   | 	je Remain6
0x1ec: 70b102000000000000   |     jmp Remain7
0x1f5:                      | LessThan4:
0x1f5: c0f20300000000000000 |     iaddq $3, %rdx
0x1ff: 739403000000000000   |     je Remain1
0x208: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x212: 736b03000000000000   | 	je Remain2
0x21b: 762d02000000000000   | 	jg Remain3n
0x224: 70d003000000000000   |     jmp Done
0x22d:                      | Remain3n:
0x22d: 50871000000000000000 | 	mrmovq 16(%rdi), %r8	# read val from src...
0x237: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)	# ...and store it to dst
0x241: 6288                 | 	andq %r8, %r8			# val <= 0?
0x243:                      | Remain2n:
0x243: 50870800000000000000 | 	mrmovq 8(%rdi), %r8		# read val from src...
0x24d: 716002000000000000   | 	jle Remain22n			# if so, goto Npos:
0x256: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x260:                      | Remain22n:
0x260: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x26a: 6288                 | 	andq %r8, %r8			# val <= 0?
0x26c:                      | Remain1n:
0x26c: 50870000000000000000 | 	mrmovq (%rdi), %r8		# read val from src...
0x276: 718902000000000000   | 	jle Remain12n			# if so, goto Npos:
0x27f: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x289:                      | Remain12n:
0x289: 40860000000000000000 | 	rmmovq %r8, (%rsi)		# ...and store it to dst
0x293: 6288                 | 	andq %r8, %r8			# val <= 0?
0x295: 71d003000000000000   | 	jle Done				# if so, goto Npos:
0x29e: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x2a8: 70d003000000000000   | 	jmp Done
0x2b1:                      | Remain7:
0x2b1: 50873000000000000000 | 	mrmovq 48(%rdi), %r8	# read val from src...
0x2bb: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)	# ...and store it to dst
0x2c5: 6288                 | 	andq %r8, %r8			# val <= 0?
0x2c7:                      | Remain6:
0x2c7: 50872800000000000000 | 	mrmovq 40(%rdi), %r8	# read val from src...
0x2d1: 71e402000000000000   | 	jle Remain62			# if so, goto Npos:
0x2da: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x2e4:                      | Remain62:
0x2e4: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)	# ...and store it to dst
0x2ee: 6288                 | 	andq %r8, %r8			# val <= 0?
0x2f0:                      | Remain5:
0x2f0: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# read val from src...
0x2fa: 710d03000000000000   | 	jle Remain52			# if so, goto Npos:
0x303: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x30d:                      | Remain52:	
0x30d: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# ...and store it to dst
0x317: 6288                 | 	andq %r8, %r8			# val <= 0?
0x319:                      | Remain4:
0x319: 50871800000000000000 | 	mrmovq 24(%rdi), %r8	# read val from src...
0x323: 713603000000000000   | 	jle Remain42			# if so, goto Npos:
0x32c: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x336:                      | Remain42:
0x336: 40861800000000000000 | 	rmmovq %r8, 24(%rsi)	# ...and store it to dst
0x340: 6288                 | 	andq %r8, %r8			# val <= 0?
0x342:                      | Remain3:
0x342: 50871000000000000000 | 	mrmovq 16(%rdi), %r8	# read val from src...
0x34c: 715f03000000000000   | 	jle Remain32			# if so, goto Npos:
0x355: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x35f:                      | Remain32:
0x35f: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)	# ...and store it to dst
0x369: 6288                 | 	andq %r8, %r8			# val <= 0?
0x36b:                      | Remain2:
0x36b: 50870800000000000000 | 	mrmovq 8(%rdi), %r8		# read val from src...
0x375: 718803000000000000   | 	jle Remain22			# if so, goto Npos:
0x37e: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x388:                      | Remain22:
0x388: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x392: 6288                 | 	andq %r8, %r8			# val <= 0?
0x394:                      | Remain1:
0x394: 50870000000000000000 | 	mrmovq (%rdi), %r8		# read val from src...
0x39e: 71b103000000000000   | 	jle Remain12			# if so, goto Npos:
0x3a7: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x3b1:                      | Remain12:
0x3b1: 40860000000000000000 | 	rmmovq %r8, (%rsi)		# ...and store it to dst
0x3bb: 6288                 | 	andq %r8, %r8			# val <= 0?
0x3bd: 71d003000000000000   | 	jle Done				# if so, goto Npos:
0x3c6: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3d0:                      | Done:
0x3d0: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d1:                      | End:
                            | #/* $end ncopy-ys */
0x3d1:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3d8:                      | 	.align 8
0x3d8:                      | src:
0x3d8: 0100000000000000     | 	.quad 1
0x3e0: feffffffffffffff     | 	.quad -2
0x3e8: fdffffffffffffff     | 	.quad -3
0x3f0: 0400000000000000     | 	.quad 4
0x3f8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428:                      | Postdest:
0x428: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x430:                      | .align 8
                            | # Run time stack
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
                            | 
0x4b0:                      | Stack:
