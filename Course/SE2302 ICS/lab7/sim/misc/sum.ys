#赵楷越 522031910803

.pos 0
irmovq stack,%rsp
call main
halt

# Sample linked list
.align 8 
ele1:
    .quad 0x00a  # 第一个元素的值为0x00a
    .quad ele2  # 下一个元素的地址为ele2
ele2:
    .quad 0x0b0  
    .quad ele3  
ele3:
    .quad 0xc00  
    .quad 0  # 最后一个元素的地址为0，作为链表结束标记

main:
    irmovq ele1, %rdi  # 将链表的第一个节点的地址加载到%rdi
    call sum_list 
    ret  

sum_list:
    pushq %rsi  # 保存寄存器%rsi的值，为了使调用完sum_list后%rsi的值不变
    xorq %rax,%rax 

loop:
    andq %rdi,%rdi  # 判断当前节点是否为链表的结束节点
    je end 
    mrmovq (%rdi),%rsi  # 将当前节点的值加载到%rsi
    addq %rsi,%rax 
    mrmovq 8(%rdi),%rdi  # 将%rdi指向下一个节点的地址
    jmp loop 

end:
    popq %rsi  # 恢复寄存器%rsi的值
    ret

.pos 0x400
stack: 
