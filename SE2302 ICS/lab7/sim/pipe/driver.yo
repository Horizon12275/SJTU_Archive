                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e009000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f65807000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74805000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80da03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 赵楷越 Zhaokaiyue 522031910803
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Change irmovq&addq into iaddq, to reduce the number of instructions
                            | # eg. irmovq $8, %r8 addq %r8, %rdi -> iaddq $8, %rdi
                            | #
                            | # 2. Loop unrolling, to reduce the cost due to original loops.
                            | # eg. 
                            | # Loop0: 
                            | #     mrmovq (%rdi), %r8 # read val from src...
                            | #     rmmovq %r8, (%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop1
                            | #     iaddq $1, %rax     
                            | # Loop1:
                            | #     mrmovq 8(%rdi), %r8 # read val from src...
                            | #     rmmovq %r8, 8(%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop2
                            | #     iaddq $1, %rax  
                            | # ...(repeat 6 times)
                            | #
                            | # 3. Handle the situation that the remaining len is not a multiple of 8.
                            | # eg. if len < 8, then use different ways to copy the rest of the data.
                            | # Remain7:
                            | #     mrmovq 48(%rdi), %r8 	# read val from src...
                            | #     rmmovq %r8, 48(%rsi) 	# ...and store it to dst  
                            | #     andq %r8, %r8 		# val <= 0?
                            | #     jle Remain6
                            | #     iaddq $1, %rax 
                            | # Remain6:
                            | #     mrmovq 40(%rdi), %r8 	# read val from src...
                            | #     rmmovq %r8, 40(%rsi) 	# ...and store it to dst
                            | #     andq %r8, %r8 		# val <= 0?
                            | #     jle Remain5
                            | #     iaddq $1, %rax 
                            | # ...(repeat 6 times)
                            | #
                            | # 4. Use the idea of binary search to reduce the CPE when initial len < 8.
                            | # eg. 
                            | # LessThan8:
                            | #     iaddq $4, %rdx
                            | #     jl LessThan4
                            | #     je Remain4
                            | #     iaddq $-2, %rdx
                            | #     jl Remain5
                            | #     je Remain6
                            | #     jmp Remain7
                            | # LessThan4:
                            | #	 (do the similar thing as LessThan8)
                            | #
                            | # 5. Remove the bubble due to load and use hazard.
                            | # eg. Method: Load the next value before using the current value, 
                            | # combine two loops into one loop. Consequently, the bubble disappears.
                            | # Loop: 
                            | #     mrmovq (%rdi), %r8 # read val from src...
                            | # 	  mrmovq 8(%rdi), %r9 # read val from src...
                            | #     rmmovq %r8, (%rsi) # ...and store it to dst
                            | #     rmmovq %r9, 8(%rsi) # ...and store it to dst
                            | #     andq %r8, %r8 # val <= 0?
                            | #     jle Loop1
                            | #     iaddq $1, %rax     
                            | # Loop1:
                            | #     andq %r9, %r9 # val <= 0?
                            | #     jle Loop2
                            | #     iaddq $1, %rax  
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
                            |     # xorq %rax,%rax        # count = 0; # of positive vals
0x03b: c0f2f8ffffffffffffff |     iaddq $-8, %rdx
0x045: 72bd01000000000000   |     jl  LessThan8
0x04e:                      | Loop0: 
0x04e: 50870000000000000000 |     mrmovq (%rdi), %r8 		# read val from src...
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 	# read val from src...
0x062: 40860000000000000000 |     rmmovq %r8, (%rsi) 		# ...and store it to dst
0x06c: 40960800000000000000 |     rmmovq %r9, 8(%rsi) 	# ...and store it to dst
0x076: 6288                 |     andq %r8, %r8 			# val <= 0?
0x078: 718b00000000000000   |     jle Loop1
0x081: c0f00100000000000000 |     iaddq $1, %rax     		# count++
0x08b:                      | Loop1:
0x08b: 6299                 |     andq %r9, %r9 			# val <= 0?
0x08d: 71a000000000000000   |     jle Loop2
0x096: c0f00100000000000000 |     iaddq $1, %rax  
0x0a0:                      | Loop2:
0x0a0: 50871000000000000000 |     mrmovq 16(%rdi), %r8 	# read val from src...
0x0aa: 50971800000000000000 | 	mrmovq 24(%rdi), %r9 	# read val from src...
0x0b4: 40861000000000000000 |     rmmovq %r8, 16(%rsi) 	# ...and store it to dst
0x0be: 40961800000000000000 |     rmmovq %r9, 24(%rsi) 	# ...and store it to dst
0x0c8: 6288                 |     andq %r8, %r8 			# val <= 0?
0x0ca: 71dd00000000000000   |     jle Loop3
0x0d3: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x0dd:                      | Loop3:
0x0dd: 6299                 |     andq %r9, %r9 			# val <= 0?
0x0df: 71f200000000000000   |     jle Loop4
0x0e8: c0f00100000000000000 |     iaddq $1, %rax  
0x0f2:                      | Loop4:
0x0f2: 50872000000000000000 |     mrmovq 32(%rdi), %r8 	# read val from src...
0x0fc: 50972800000000000000 | 	mrmovq 40(%rdi), %r9 	# read val from src...
0x106: 40862000000000000000 |     rmmovq %r8, 32(%rsi) 	# ...and store it to dst
0x110: 40962800000000000000 |     rmmovq %r9, 40(%rsi) 	# ...and store it to dst
0x11a: 6288                 |     andq %r8, %r8 			# val <= 0?
0x11c: 712f01000000000000   |     jle Loop5
0x125: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x12f:                      | Loop5:
0x12f: 6299                 |     andq %r9, %r9 			# val <= 0?
0x131: 714401000000000000   |     jle Loop6
0x13a: c0f00100000000000000 |     iaddq $1, %rax  
0x144:                      | Loop6:
0x144: 50873000000000000000 |     mrmovq 48(%rdi), %r8 	# read val from src...
0x14e: 50973800000000000000 | 	mrmovq 56(%rdi), %r9 	# read val from src...
0x158: 40863000000000000000 |     rmmovq %r8, 48(%rsi) 	# ...and store it to dst
0x162: 40963800000000000000 |     rmmovq %r9, 56(%rsi) 	# ...and store it to dst
0x16c: 6288                 |     andq %r8, %r8 			# val <= 0?
0x16e: 718101000000000000   |     jle Loop7
0x177: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x181:                      | Loop7:
0x181: 6299                 |     andq %r9, %r9 			# val <= 0?
0x183: 719601000000000000   |     jle LoopTest
0x18c: c0f00100000000000000 |     iaddq $1, %rax  		# count++
0x196:                      | LoopTest:					# Test whether the remaining len is a multiple of 8
0x196: c0f74000000000000000 |     iaddq $64, %rdi         # %rdi = src, %rsi = dst, %rdx = len
0x1a0: c0f64000000000000000 |     iaddq $64, %rsi         
0x1aa: c0f2f8ffffffffffffff |     iaddq $-8, %rdx         
0x1b4: 754e00000000000000   |     jge Loop0               # if the remaining len > 0, continue to loop0
0x1bd:                      | LessThan8:
0x1bd: c0f20400000000000000 |     iaddq $4, %rdx			# Handle the situation that the remaining len is not a multiple of 8
0x1c7: 72fe01000000000000   |     jl LessThan4
0x1d0: 732203000000000000   |     je Remain4
0x1d9: c0f2feffffffffffffff |     iaddq $-2, %rdx 		# Use the idea of binary search to reduce the CPE when initial len < 8
0x1e3: 72f902000000000000   | 	jl Remain5
0x1ec: 73d002000000000000   | 	je Remain6
0x1f5: 70ba02000000000000   |     jmp Remain7
0x1fe:                      | LessThan4:
0x1fe: c0f20300000000000000 |     iaddq $3, %rdx
0x208: 739d03000000000000   |     je Remain1
0x211: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x21b: 737403000000000000   | 	je Remain2
0x224: 763602000000000000   | 	jg Remain3n
0x22d: 70d903000000000000   |     jmp Done
0x236:                      | Remain3n:
0x236: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11	# read val from src...
0x240: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x24a: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x24c:                      | Remain2n:
0x24c: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x256: 716902000000000000   | 	jle Remain22n		# if so, goto Npos:
0x25f: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x269:                      | Remain22n:
0x269: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x273: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x275:                      | Remain1n:
0x275: 50b70000000000000000 | 	mrmovq (%rdi), %r11	# read val from src...
0x27f: 719202000000000000   | 	jle Remain12n		# if so, goto Npos:
0x288: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x292:                      | Remain12n:
0x292: 40b60000000000000000 | 	rmmovq %r11, (%rsi)
0x29c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x29e: 71d903000000000000   | 	jle Done		# if so, goto Npos:
0x2a7: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x2b1: 70d903000000000000   | 	jmp Done
0x2ba:                      | Remain7:
0x2ba: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11	# read val from src...
0x2c4: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi)
0x2ce: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2d0:                      | Remain6:
0x2d0: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x2da: 71ed02000000000000   | 	jle Remain62		# if so, goto Npos:
0x2e3: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x2ed:                      | Remain62:
0x2ed: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x2f7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2f9:                      | Remain5:
0x2f9: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11	# read val from src...
0x303: 711603000000000000   | 	jle Remain52		# if so, goto Npos:
0x30c: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x316:                      | Remain52:	
0x316: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)
0x320: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x322:                      | Remain4:
0x322: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x32c: 713f03000000000000   | 	jle Remain42	# if so, goto Npos:
0x335: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x33f:                      | Remain42:
0x33f: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x349: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x34b:                      | Remain3:
0x34b: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11	# read val from src...
0x355: 716803000000000000   | 	jle Remain32		# if so, goto Npos:
0x35e: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x368:                      | Remain32:
0x368: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x372: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x374:                      | Remain2:
0x374: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x37e: 719103000000000000   | 	jle Remain22		# if so, goto Npos:
0x387: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x391:                      | Remain22:
0x391: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x39b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x39d:                      | Remain1:
0x39d: 50b70000000000000000 | 	mrmovq (%rdi), %r11	# read val from src...
0x3a7: 71ba03000000000000   | 	jle Remain12		# if so, goto Npos:
0x3b0: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x3ba:                      | Remain12:
0x3ba: 40b60000000000000000 | 	rmmovq %r11, (%rsi)
0x3c4: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3c6: 71d903000000000000   | 	jle Done		# if so, goto Npos:
0x3cf: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3d9:                      | Done:
0x3d9: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3da:                      | End:
                            | #/* $end ncopy-ys */
0x3da:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 38.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x3da:                      | check:
                            | 	# Return value test
0x3da: 30fa2600000000000000 | 	irmovq $38,%r10
0x3e4: 61a0                 | 	subq %r10,%rax
0x3e6: 730204000000000000   | 	je checkb
0x3ef: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x3f9: 704005000000000000   | 	jmp cdone
0x402:                      | checkb:
                            | 	# Code length check
0x402: 30f0da03000000000000 | 	irmovq EndFun,%rax
0x40c: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x416: 6120                 | 	subq %rdx,%rax
0x418: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x422: 6102                 | 	subq %rax,%rdx
0x424: 754004000000000000   | 	jge checkm
0x42d: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x437: 704005000000000000   | 	jmp cdone
0x440:                      | checkm:
0x440: 30f25807000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x44a: 30f34805000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x454: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x45e: 6277                 | 	andq %rdi,%rdi
0x460: 73be04000000000000   | 	je checkpre         # Skip check if count = 0
0x469:                      | mcloop:
0x469: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x473: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x47d: 6160                 | 	subq %rsi,%rax
0x47f: 739b04000000000000   | 	je  mok
0x488: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x492: 704005000000000000   | 	jmp cdone
0x49b:                      | mok:
0x49b: 30f00800000000000000 | 	irmovq $8,%rax
0x4a5: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4a7: 6003                 | 	addq %rax,%rbx    # src++
0x4a9: 30f00100000000000000 | 	irmovq $1,%rax
0x4b3: 6107                 | 	subq %rax,%rdi    # cnt--
0x4b5: 766904000000000000   | 	jg mcloop
0x4be:                      | checkpre:
                            | 	# Check for corruption
0x4be: 30f25007000000000000 | 	irmovq Predest,%rdx
0x4c8: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4d2: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x4dc: 6120                 | 	subq %rdx,%rax
0x4de: 73fa04000000000000   | 	je checkpost
0x4e7: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x4f1: 704005000000000000   | 	jmp cdone
0x4fa:                      | checkpost:
                            | 	# Check for corruption
0x4fa: 30f25809000000000000 | 	irmovq Postdest,%rdx
0x504: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x50e: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x518: 6120                 | 	subq %rdx,%rax
0x51a: 733605000000000000   | 	je checkok
0x523: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x52d: 704005000000000000   | 	jmp cdone
0x536:                      | checkok:
                            | 	# Successful checks
0x536: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x540:                      | cdone:
0x540: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x548:                      | 	.align 8
0x548:                      | src:
0x548: 0100000000000000     | 	.quad 1
0x550: feffffffffffffff     | 	.quad -2
0x558: 0300000000000000     | 	.quad 3
0x560: fcffffffffffffff     | 	.quad -4
0x568: 0500000000000000     | 	.quad 5
0x570: 0600000000000000     | 	.quad 6
0x578: 0700000000000000     | 	.quad 7
0x580: 0800000000000000     | 	.quad 8
0x588: f7ffffffffffffff     | 	.quad -9
0x590: f6ffffffffffffff     | 	.quad -10
0x598: 0b00000000000000     | 	.quad 11
0x5a0: 0c00000000000000     | 	.quad 12
0x5a8: 0d00000000000000     | 	.quad 13
0x5b0: 0e00000000000000     | 	.quad 14
0x5b8: 0f00000000000000     | 	.quad 15
0x5c0: 1000000000000000     | 	.quad 16
0x5c8: efffffffffffffff     | 	.quad -17
0x5d0: eeffffffffffffff     | 	.quad -18
0x5d8: edffffffffffffff     | 	.quad -19
0x5e0: ecffffffffffffff     | 	.quad -20
0x5e8: 1500000000000000     | 	.quad 21
0x5f0: eaffffffffffffff     | 	.quad -22
0x5f8: 1700000000000000     | 	.quad 23
0x600: 1800000000000000     | 	.quad 24
0x608: 1900000000000000     | 	.quad 25
0x610: e6ffffffffffffff     | 	.quad -26
0x618: e5ffffffffffffff     | 	.quad -27
0x620: 1c00000000000000     | 	.quad 28
0x628: e3ffffffffffffff     | 	.quad -29
0x630: 1e00000000000000     | 	.quad 30
0x638: 1f00000000000000     | 	.quad 31
0x640: 2000000000000000     | 	.quad 32
0x648: dfffffffffffffff     | 	.quad -33
0x650: 2200000000000000     | 	.quad 34
0x658: 2300000000000000     | 	.quad 35
0x660: dcffffffffffffff     | 	.quad -36
0x668: 2500000000000000     | 	.quad 37
0x670: 2600000000000000     | 	.quad 38
0x678: d9ffffffffffffff     | 	.quad -39
0x680: 2800000000000000     | 	.quad 40
0x688: 2900000000000000     | 	.quad 41
0x690: d6ffffffffffffff     | 	.quad -42
0x698: d5ffffffffffffff     | 	.quad -43
0x6a0: 2c00000000000000     | 	.quad 44
0x6a8: 2d00000000000000     | 	.quad 45
0x6b0: d2ffffffffffffff     | 	.quad -46
0x6b8: d1ffffffffffffff     | 	.quad -47
0x6c0: 3000000000000000     | 	.quad 48
0x6c8: cfffffffffffffff     | 	.quad -49
0x6d0: 3200000000000000     | 	.quad 50
0x6d8: cdffffffffffffff     | 	.quad -51
0x6e0: ccffffffffffffff     | 	.quad -52
0x6e8: cbffffffffffffff     | 	.quad -53
0x6f0: caffffffffffffff     | 	.quad -54
0x6f8: c9ffffffffffffff     | 	.quad -55
0x700: 3800000000000000     | 	.quad 56
0x708: 3900000000000000     | 	.quad 57
0x710: 3a00000000000000     | 	.quad 58
0x718: 3b00000000000000     | 	.quad 59
0x720: 3c00000000000000     | 	.quad 60
0x728: 3d00000000000000     | 	.quad 61
0x730: c2ffffffffffffff     | 	.quad -62
0x738: 3f00000000000000     | 	.quad 63
0x740: 4000000000000000     | 	.quad 64
0x748: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x750:                      | 	.align 16
0x750:                      | Predest:
0x750: fadebc0000000000     | 	.quad 0xbcdefa
0x758:                      | dest:
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860: abefcd0000000000     | 	.quad 0xcdefab
0x868: abefcd0000000000     | 	.quad 0xcdefab
0x870: abefcd0000000000     | 	.quad 0xcdefab
0x878: abefcd0000000000     | 	.quad 0xcdefab
0x880: abefcd0000000000     | 	.quad 0xcdefab
0x888: abefcd0000000000     | 	.quad 0xcdefab
0x890: abefcd0000000000     | 	.quad 0xcdefab
0x898: abefcd0000000000     | 	.quad 0xcdefab
0x8a0: abefcd0000000000     | 	.quad 0xcdefab
0x8a8: abefcd0000000000     | 	.quad 0xcdefab
0x8b0: abefcd0000000000     | 	.quad 0xcdefab
0x8b8: abefcd0000000000     | 	.quad 0xcdefab
0x8c0: abefcd0000000000     | 	.quad 0xcdefab
0x8c8: abefcd0000000000     | 	.quad 0xcdefab
0x8d0: abefcd0000000000     | 	.quad 0xcdefab
0x8d8: abefcd0000000000     | 	.quad 0xcdefab
0x8e0: abefcd0000000000     | 	.quad 0xcdefab
0x8e8: abefcd0000000000     | 	.quad 0xcdefab
0x8f0: abefcd0000000000     | 	.quad 0xcdefab
0x8f8: abefcd0000000000     | 	.quad 0xcdefab
0x900: abefcd0000000000     | 	.quad 0xcdefab
0x908: abefcd0000000000     | 	.quad 0xcdefab
0x910: abefcd0000000000     | 	.quad 0xcdefab
0x918: abefcd0000000000     | 	.quad 0xcdefab
0x920: abefcd0000000000     | 	.quad 0xcdefab
0x928: abefcd0000000000     | 	.quad 0xcdefab
0x930: abefcd0000000000     | 	.quad 0xcdefab
0x938: abefcd0000000000     | 	.quad 0xcdefab
0x940: abefcd0000000000     | 	.quad 0xcdefab
0x948: abefcd0000000000     | 	.quad 0xcdefab
0x950: abefcd0000000000     | 	.quad 0xcdefab
0x958:                      | Postdest:
0x958: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x960:                      | .align 8
                            | # Run time stack
0x960: 0000000000000000     | 	.quad 0
0x968: 0000000000000000     | 	.quad 0
0x970: 0000000000000000     | 	.quad 0
0x978: 0000000000000000     | 	.quad 0
0x980: 0000000000000000     | 	.quad 0
0x988: 0000000000000000     | 	.quad 0
0x990: 0000000000000000     | 	.quad 0
0x998: 0000000000000000     | 	.quad 0
0x9a0: 0000000000000000     | 	.quad 0
0x9a8: 0000000000000000     | 	.quad 0
0x9b0: 0000000000000000     | 	.quad 0
0x9b8: 0000000000000000     | 	.quad 0
0x9c0: 0000000000000000     | 	.quad 0
0x9c8: 0000000000000000     | 	.quad 0
0x9d0: 0000000000000000     | 	.quad 0
0x9d8: 0000000000000000     | 	.quad 0
                            | 
0x9e0:                      | Stack:
